{"thirdPartyDependencies":[],"code":"/**\n * Initializes the application state and introduces the bot to the user.\n * @param {AppState} state - the state of the app\n * @param {Tool} tools - available tools to perform tasks\n */\nasync function startup(state, tools) {\n    tools.reply(`Hello and welcome! I'm your friendly WorkoutBot,\n    here to help you achieve your fitness goals. \n    Whether you're just starting out or looking to shake up your routine, \n    I'm here to guide and provide suggestions for your workout plans. \n    Let's make your fitness journey exciting and fulfilling!\n    Here's how we can get started:\n\n    1. Full Workout Plans & Nutrition - \n    Receive a personalized workout schedule along with daily protein intake \n    recommendations.\n    2. Exercise Instructions - \n    Get detailed guidance on how to perform specific exercises correctly.\n    3. Food Nutrition Check - Explore nutritional information to better \n    understand your diet choices.\n    4. General Fitness Enquiries-\n    Get general answers on fitness related questions.\n    To begin, let's set up your personal fitness profile. \n    Just select an option from the top (eg, 1) to choose the service you need!\n    `);\n    state.option = '';\n    state.gender = '';\n    state.age = 0;\n    state.height = 0;\n    state.weight = 0;\n    state.difficulty = 1;\n    state.place = 1;\n    state.currentStage = 'start';\n    state.wantNutriInfo = false;\n    state.wantTotals = false;\n    state.totals = {\"fat_total_g\": 0, \"fat_saturated_g\": 0, \"protein_g\": 0, \"sodium_mg\": 0, \"potassium_mg\": 0, \"cholesterol_mg\": 0, \"carbohydrates_total_g\": 0, \"fiber_g\": 0, \"sugar_g\": 0};\n    state.getRecommendedExercise = false;\n}\n\n/**\n * Handles user responses and navigates through the workout setup process using if-else constructs instead of a switch statement.\n * @param {string} payload - the message sent by the user\n * @param {AppState} state - the state of the app\n * @param {Tool} tools - available tools to perform tasks\n */\n\n\nasync function run(payload, state, tools) {\n    let userResponse = payload.toLowerCase().trim();\n    if (state.currentStage === 'start') {\n        state.option = userResponse;\n    }\n    const mongoApiKey ='hvG233ycLc09800eeVNO9WvSnneATGLHNg46hEJq9XKDevkYn70cXwdL3Tcf5DZY'\n    const mongoURL = 'https://ap-southeast-1.aws.data.mongodb-api.com/app/data-hpmur/endpoint/data/v1';\n\n\n    if (state.option === '1') {\n        if (state.currentStage === 'start') {\n            tools.reply(\"Welcome! Please enter your gender (Male/Female).\");\n            state.currentStage = \"awaiting_gender\";\n        } else if (state.currentStage === \"awaiting_gender\") {\n            if (userResponse != 'male' && userResponse != 'female'){\n              tools.reply(\"Please enter correct gender\");\n              state.currentStage = \"awaiting_gender\";\n            }\n            else{\n            state.gender = userResponse;\n            tools.reply(`Please enter your age in numeric (e.g., 20).`);\n            state.currentStage = \"awaiting_age\";\n            }\n        } else if (state.currentStage === \"awaiting_age\") {\n            if (!/^\\s*-?\\d+\\s*$/.test(userResponse) || parseFloat(userResponse) <= 0 || parseFloat(userResponse) >= 100){\n              tools.reply(\"Please enter correct age\");\n              state.currentStage = \"awaiting_age\";\n            }\n            else{\n            state.age = parseInt(userResponse);\n            tools.reply(`Please enter your height in meters (e.g., 1.78).`);\n            state.currentStage = \"awaiting_height\";\n            }\n        } else if (state.currentStage === \"awaiting_height\") {\n            if (!/^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(userResponse) || (parseFloat(userResponse)) <= 0.5 || (parseFloat(userResponse)) >=2.5 ){\n              tools.reply(\"Please enter correct height\");\n              state.currentStage = \"awaiting_height\";\n            }\n            else{\n            state.height = parseFloat(userResponse);\n            tools.reply(`Please enter your weight in kg (e.g., 65.3).`);\n            state.currentStage = \"awaiting_weight\";\n            }\n        } else if (state.currentStage === \"awaiting_weight\") {\n            if (!/^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(userResponse) && (parseFloat(userResponse)) <= 0){\n              tools.reply(\"Please enter correct weight\");\n              state.currentStage = \"awaiting_weight\";\n            }\n            else{\n            state.weight = parseFloat(userResponse);\n            tools.reply(`Please enter the difficulty level of the workout you wish to carry out (1-Beginner, 2-Intermediate, 3-Expert).`);\n            state.currentStage = \"awaiting_difficulty\";\n            }\n        } else if (state.currentStage === \"awaiting_difficulty\") {\n            if (userResponse.indexOf('.')!=-1 || (parseInt(userResponse) != 1 && parseInt(userResponse) != 2 && parseInt(userResponse) != 3)){\n              tools.reply(\"Please enter correct difficulty\");\n              state.currentStage = \"awaiting_difficulty\";\n            }\n            else{\n            state.difficulty = parseInt(userResponse);\n            tools.reply(`Please enter the type of workout environment you are in (1-Home, 2-Gym).`);\n            state.currentStage = \"awaiting_place\";\n            }\n        } else if (state.currentStage === \"awaiting_place\") {\n            if (userResponse.indexOf('.')!=-1 || (parseInt(userResponse) != 1 && parseInt(userResponse) != 2)){\n              tools.reply(\"Please enter correct place\");\n              state.currentStage = \"awaiting_place\";\n            }\n            else{\n            state.place = parseInt(userResponse);\n            let levels = ['Beginner', 'Intermediate', 'Expert'];\n            let envs = ['Home', 'Gym'];\n            let level = levels[state.difficulty - 1] || 'Beginner';\n            let env = envs[state.place - 1] || 'Home';\n\n            const summary={ \n              \"Gender\": state.gender,\n              \"Age\":state.age,\n              \"Height\":state.height,\n              \"Weight\":state.weight,\n              \"Difficulty\":level,\n              \"place\":env\n            }\n            // Initialize an array to store the responses\n            const mongoResponses1 = [];\n\n            // Your original configuration object for the query looks fine.\n            const mongoData1 = {\n              collection: 'Data',\n              database: 'Nemobot_Project',\n              dataSource: 'Cluster0',\n              projection: {\n                _id: 0,\n                title: 1,\n                difficulty: 1,\n                place: 1,\n                muscle: 1,\n                url: 1\n              }\n            };\n            const mongoResponse1 = await fetch(mongoURL+'/action/find', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'api-key': mongoApiKey,\n              },\n              body: JSON.stringify(mongoData1)\n            });\n            if (!mongoResponse1.ok) {\n              throw new Error('MongoDB fetch was not ok');\n            }\n            const mongoResult1 = await mongoResponse1.json();\n            if (mongoResult1.documents && mongoResult1.documents.length) {\n              mongoResult1.documents.forEach(document => {\n                mongoResponses1.push({\n                  \"name\": document.title,\n                  \"muscle\": document.muscle,\n                  \"difficulty\": document.difficulty,\n                  \"url\": document.url,\n                  \"place\": document.place,\n                });\n              });\n            }\n            const reply= await tools.GetExercisePlan({Summary:JSON.stringify(summary), MongoArray:JSON.stringify(mongoResponses1)});\n            //params = await tools.getParams({message: payload});\n            tools.reply(reply);\n            state.currentStage = \"completed\";\n        }\n        //else{tools.reply(\"Wrong input\");}\n    } }\n    else if (state.option === '2') {\n      if(state.currentStage === \"start\")\n      {\n        state.currentStage = \"exercise\";      \n      }  \n      if (!state.getRecommendedExercise && state.currentStage===\"exercise\") {\n        state.getRecommendedExercise = true;\n        tools.reply(\"Okay please tell me the name of the exercise.\");\n      } else if (state.getRecommendedExercise) {\n        try {\n          const params = await tools.GetExerciseRecommendation({ userMessage: payload });\n          const paramsJson = JSON.parse(params);\n          const query = `name=${paramsJson.name}`;\n          const apiUrl = `https://api.api-ninjas.com/v1/exercises?${query}`;\n          const apiKey = \"wtu5kiei/zj9nb8uwaFbLA==7KaybfaLwpSSf0Y7\";\n          const response = await fetch(apiUrl, {\n            headers: {\n              'X-Api-Key': apiKey,\n              'Content-Type': 'application/json',\n            }\n          });\n\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          const apiData = await response.json();\n          const finalReply = apiData.slice(0, 3);\n          const mongoResponses = [];\n\n          for (const exercise of finalReply) {\n            const mongoData = {\n              collection: 'Data',\n              database: 'Nemobot_Project',\n              dataSource: 'Cluster0',\n              filter: { \"title\": exercise[\"name\"] },\n              projection: {\n                _id: 1,\n                title: 1,\n                url: 1\n              }\n            };\n\n            const mongoResponse = await fetch(mongoURL+'/action/findOne', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'api-key': mongoApiKey,\n              },\n              body: JSON.stringify(mongoData)\n            });\n\n            if (!mongoResponse.ok) {\n              throw new Error('MongoDB fetch was not ok');\n            }\n\n            const mongoResult = await mongoResponse.json();\n            if (mongoResult.document) {\n              mongoResponses.push({\n                \"name\": mongoResult.document.title,\n                \"muscle\": exercise[\"muscle\"],\n                \"Equipment\": exercise[\"equipment\"],\n                \"url\": mongoResult.document.url,\n                \"info\": exercise[\"instructions\"]\n              });\n            }\n          }\n\n          mongoResponses.forEach(exercise => {\n            tools.reply(`The name of this exercise is ${exercise.name}. The muscle group targeted by this exercise is ${exercise.muscle}. The equiment type required to perform this exercise is: ${exercise.Equipment}. The instructions for performing this exercise are as follows: ${exercise.info} Here is a youtube link to watch a video for form: **[click here](${exercise.url} \"${exercise.url}\")**`);\n          });\n\n          state.getRecommendedExercise = false;\n          state.currentStage=\"completed\"\n        } catch (error) {\n          console.error('There was a problem with the fetch operation:', error);\n          tools.reply(`Fetching document failed: ${error}`);\n        }\n      }\n  else{\n    tools.reply(\"Please enter correct input\");\n    state.currentStage = \"start\";\n  \n    }\n        //state.currentStage = \"completed\";\n    } \n    else if (state.option === '3') {\n      if(state.currentStage === \"start\")\n      {\n        //tools.reply(\"Please answer 'breakfast', 'lunch', 'dinner' or 'snack'.\");\n        state.currentStage = \"nutri\";\n        state.wantNutriInfo = true;\n        tools.reply(\"Enter food items and weight in grams\");\n      }     \n        // if (state.wantNutriInfo == false && (payload.toLowerCase() == \"breakfast\" || payload.toLowerCase() == \"lunch\" || payload.toLowerCase() == \"dinner\" || payload.toLowerCase() == \"snack\"))\n        // {\n        // state.wantNutriInfo = true;\n        // tools.reply(`You chose: ${payload}`);\n        // tools.reply(\"Please type in what food items you ate and the amount of each in grams\");\n        // }\n      else if (state.wantNutriInfo == true){\n          var total_cal = 0;\n          // var totals = {\"Total fat g\": 0, \"Total saturated fat g\": 0, \"Total protein g\": 0, \"Total sodium mg\": 0, \"Total potassium mg\": 0, \"Total cholesterol mg\": 0, \"Total carbohydrates g\": 0, \"Total fiber g\": 0, \"Total sugar g\": 0};\n          const fetchPromises = [];\n          params = await tools.getParams({message: payload});\n          const paramsJson = JSON.parse(params);\n          \n          for(pos in paramsJson){\n            const query = paramsJson[pos].weight+ ' '+ paramsJson[pos].item;\n            const apiUrl = `https://api.api-ninjas.com/v1/nutrition?query=${query}`;\n            const apiKey = \"3ug1vbFL6+dW/R7PPOs3uQ==Ay9AOfnGxPU95DQb\";\n\n            const promise = fetch(apiUrl, {\n              headers: {\n                'X-Api-Key': `${apiKey}`\n              }\n            })\n            .then(response => {\n              if (!response.ok) {\n                throw new Error('Network response was not ok');\n              }\n              return response.json();\n            })\n            .then(data => {\n              console.log(data);\n              total_cal+= data[0].calories;\n              for (const [key, value] of Object.entries(state.totals)){\n                state.totals[key] = state.totals[key] + data[0][key];\n                console.log(state.totals[key]);\n              }\n              const info = JSON.stringify(data, null, 1).replace(/,/g, ',\\n').replace(/\"/g, '').replace(/\"/g, '').replace(/[\\[\\]{}]/g, '').replace(/_/g, ' ');\n              tools.reply(info);\n            })\n      .catch(error => {\n        console.error('There was a problem with the fetch operation:', error);\n        tools.reply(\"Error fetching data. Please rephrase your message.\");\n        state.currentStage = \"start\";\n      });\n      fetchPromises.push(promise);\n    }\n     Promise.all(fetchPromises)\n        .then(() => {\n            // Code to run after all fetch requests are completed\n            state.wantNutriInfo = false;\n            tools.reply(\"Total calories: \"+total_cal.toFixed(2));\n            tools.reply(\"If you would like to know the total of other nutrients, please type them in. Type nutrient names in this format: 'sodium_mg, sugar_g'. Otherwise type 'No'.\")\n            state.wantTotals = true;\n            //tools.reply(\"Would you like to calculate nutrition information for any of your meals? Please answer 'breakfast', 'lunch', 'dinner' or 'snack'.\");\n        })\n        .catch(error => {\n            console.error('There was a problem with the fetch operation:', error);\n            state.currentStage = \"start\";\n        });\n  }\n\n  else if(state.wantTotals == true){\n\n    if(payload.toLowerCase() != \"no\"){\n      const arr = payload.split(\",\");\n      for (pos in arr){\n        const key = arr[pos].trim();\n        tools.reply(key + \": \" + state.totals[key]);\n      }\n    }\n\n    for (const [key, value] of Object.entries(state.totals)){\n      state.totals[key] = 0;\n    }\n    state.wantTotals = false;\n    state.currentStage = \"completed\";\n    //tools.reply(\"Would you like to calculate nutrition information for any of your meals? Please answer 'breakfast', 'lunch', 'dinner' or 'snack'.\");\n  }\n\n  else{\n    if (userResponse != 'exit' && currentStage=='awaiting_return')\n      tools.reply(\"Please enter correct input\"); \n  }\n  \n}     //state.currentStage = \"completed\";\n\n   else if (state.option === '4'){\n      if(state.currentStage === \"start\")\n        {\n          tools.reply(\"Ask me any fitness related question. Type Exit to go back to the main menu.\")\n          state.currentStage = \"fitness\";      \n        }\n        else if(state.currentStage===\"fitness\")\n        {\n          if(userResponse === \"exit\")\n          {\n            state.currentStage = \"completed\";\n          }\n          else{\n          const reply=await tools.GetFitnessEnquiries({Message:userResponse},100)\n          tools.reply(reply)\n          }\n        }\n  }\n    \n     else {\n        tools.reply(`No option found, please re-enter the correct option.`);\n        //state.currentStage = \"completed\";\n    }\n    \n    if (state.currentStage === \"completed\"){\n      tools.reply( `type \"Exit\" to go back to main menu.`)\n      state.currentStage = \"awaiting_return\";\n    }else if(state.currentStage === \"awaiting_return\" && userResponse.toLowerCase() === \"exit\"){\n      startup(state,tools);\n    }\n\n\n/**\n * Defines a unit test case for the application.\n * @param {Test} test - define a test case\n * @param {Tool} tools - available tools to perform a task\n */\nfunction unitTest(test, tools) {\n    test(\"Test 1\", 1, async (expect) => {\n        expect(true).toBeTrue();\n        tools.reply(\"test success\");\n    });\n}}","llmFunctions":[{"functionName":"chat","description":"A chat bot that replies according to the previous conversation.","arguments":["userMessage"],"enableMemory":true,"messageHistory":[{"role":"system","content":"You are a helpful assistant.\nYour name is Workoutbot.\nYour reply should be concise, clear, informative and logical.\nyou should return the data after fetch when user ask for it."},"memoryPlaceholder",{"role":"user","content":"{{userMessage}}"}],"stream":false,"parameters":{"maxResponse":100,"temperature":0.7,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"getParams","description":"Get the values for food and amount","arguments":["message"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"Your job is to detect food items and their corresponding weight in grams from the message. If the unit of any item is not grams then convert it to grams.\n\nReply as an array of objects as shown below:\n[\n  {\n    \"item\": \"rice\",\n    \"weight\": \"200g\"\n  },\n  {\n    \"item\": \"beans\",\n    \"weight\": \"100g\"\n  }\n  ...\n]"},{"role":"user","content":"Message: {{message}}"}],"stream":false,"parameters":{"maxResponse":500,"temperature":0,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"GetExerciseRecommendation","description":"Get the name of the muscle","arguments":["userMessage"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"user","content":"userInput : {{userMessage}}"},{"role":"system","content":"Your job is to detect  the name of an exercise from the userMessage. \n\nReply with the format below:\n{\n   \"name\": \"<ExerciseName>\"\n}"}],"stream":false,"parameters":{"maxResponse":200,"temperature":0,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"GetExercisePlan","description":"","arguments":["Summary","MongoArray"],"enableMemory":false,"messageHistory":["memoryPlaceholder",{"role":"system","content":"base on singapore context.\nYou are a professional personal trainer.\nYour job is to recommend a suitable daily workout routine for the user.\nThe workout routine should contain the following:\n[\n{\"daily recommended protein consumption\":\"\"}, // MUST mention once only and provide the total for protein that is calculated according to difficulty level\n{\n  \"type of exercise\":\"\", // specific exercise name like Incline Hammer Curls\n  \"number of reps\":\"\",\n  \"number of sets\":\"\",\n  \"rest duration between reps\":\"\",\n// do not show url in your reply\n}\n]\n\nYour workout routine MUST be based on the user's gender, age, height, weight, difficulty and place. If the place is 'home', please provide exercises that do not require any equipment. you MUST Provide 4 most appropriate exercises that train different muscle groups most suitable for user. Refer to the array passed as a parameter and only suggest exercises from that array.\n\nYour reply MUST be in markdown format.\n**User Details:**\n**Daily Nutrition Consumption Recommended:**\n**Workouts Recommandation:**"},{"role":"user","content":"Message: {{Summary}}\nData: {{MongoArray}}"}],"stream":false,"parameters":{"maxResponse":4000,"temperature":0.5,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]},{"functionName":"GetFitnessEnquiries","description":"","arguments":["Message"],"enableMemory":true,"messageHistory":["memoryPlaceholder",{"role":"system","content":"You are a fitness trainer.\nYour job is to answer fitness related questions only.\nPlease do not answer any non fitness related questions. If you receive a non fitness related question, tell the user you cannot answer non fitness related questions.\nReply in sentence format.\nAt the end of your reply add the following: \"Type Exit to return to the main menu\"."},{"role":"user","content":"Message: {{Message}}"}],"stream":false,"parameters":{"maxResponse":500,"temperature":0.5,"topP":0.95,"frequencyPenalty":0,"presencePenalty":0},"functions":[]}]}